const savedLat = parseFloat(localStorage.getItem('mapLat'));
const savedLng = parseFloat(localStorage.getItem('mapLng'));
const savedZoom = parseInt(localStorage.getItem('mapZoom'), 10);

// –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∞–ª—ñ–¥–Ω—ñ ‚Äî –±–µ—Ä–µ–º–æ —ó—Ö, —ñ–Ω–∞–∫—à–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ
const initialLat = !isNaN(savedLat) ? savedLat : 49.082808980594464;
const initialLng = !isNaN(savedLng) ? savedLng : 33.42592096675134;
const initialZoom = !isNaN(savedZoom) ? savedZoom : 20;

const map = L.map('map').setView([initialLat, initialLng], initialZoom);

L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution: '¬© OpenStreetMap contributors'
}).addTo(map);

// –ü—Ä–∏ –∑–º—ñ–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –∞–±–æ –º–∞—Å—à—Ç–∞–±—É –∫–∞—Ä—Ç–∏ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ localStorage
map.on('moveend', () => {
  const center = map.getCenter();
  localStorage.setItem('mapLat', center.lat);
  localStorage.setItem('mapLng', center.lng);
  localStorage.setItem('mapZoom', map.getZoom());
});








let lights = []; // –º–∞—Å–∏–≤ —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä—ñ–≤, –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è –∑ JSON

// –§—É–Ω–∫—Ü—ñ—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ñ–∞–∑–∏ —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä–∞
function getLightPhase(currentMs, light) {
  const elapsedMs = currentMs - light._startUnixMs;
  if (elapsedMs < 0) {
    return { color: "off", remainingMs: -elapsedMs };
  }

  const { green, yellow, red } = light.phases;
  const totalCycleMs = (green + yellow + red) * 1000;
  const tMs = elapsedMs % totalCycleMs;

  if (tMs < green * 1000) {
    return { color: "green", remainingMs: green * 1000 - tMs };
  }
  if (tMs < (green + yellow) * 1000) {
    return { color: "yellow", remainingMs: (green + yellow) * 1000 - tMs };
  }
  return { color: "red", remainingMs: totalCycleMs - tMs };
}



// –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É —Ç–∞ —á–∞—Å —Å—Ç–∞—Ä—Ç—É, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å Unix –º—Å –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É —Å—Ç–∞—Ä—Ç—É + –¥–æ–±–æ–≤—ñ –∑—Å—É–≤–∏ 
function parseStartTime(dateTimeStr, light) {
  const baseDate = new Date(dateTimeStr);
  const now = new Date();

   // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ + —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è
  const todayStart = new Date(
    now.getFullYear(),
    now.getMonth(),
    now.getDate(),
    baseDate.getHours(),
    baseDate.getMinutes(),
    baseDate.getSeconds(),
    baseDate.getMilliseconds()
  );

  // –°–∫–æ–ª—å–∫–æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å—É—Ç–æ–∫ –ø—Ä–æ—à–ª–æ (–±–µ–∑ —É—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏)
  const baseDateOnly = new Date(baseDate.getFullYear(), baseDate.getMonth(), baseDate.getDate());
  const nowDateOnly = new Date(now.getFullYear(), now.getMonth(), now.getDate());

  const daysPassed = Math.floor((nowDateOnly - baseDateOnly) / 86400000);

  // –°–¥–≤–∏–≥ –≤ –º—Å: –∫–∞–∂–¥—ã–µ —Å—É—Ç–∫–∏ + –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–¥–≤–∏–≥
  const dailyOffsetMs = daysPassed * light.dailyStartOffset  * 1000;

  return todayStart.getTime() + dailyOffsetMs;
}




// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ä–∫–µ—Ä–∞ —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç—ñ
function createLightMarker(light) {
  const div = document.createElement('div');
  div.className = 'traffic-light';
  const marker = L.marker(light.coords, {
    icon: L.divIcon({
      className: 'custom-icon',
      html: div.outerHTML
    })
  }).addTo(map);
  light._marker = marker;
  light._startUnixMs = parseStartTime(light.startDateTime, light);
}









// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä—ñ–≤ –Ω–∞ –∫–∞—Ä—Ç—ñ ()
function updateLights() {
    const nowMs = Date.now();
    lights.forEach(light => {
      const { color, remainingMs } = getLightPhase(nowMs, light);

      let htmlContent;
      if (color === 'off') {
        htmlContent = `<div class="traffic-light" style="background:gray">
          <div class="timer">–°—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ ${(remainingMs / 1000).toFixed(1)}s</div>
        </div>`;
      } else {
        htmlContent = `<div class="traffic-light" style="background:${color}">
          <div class="timer">${Math.ceil(remainingMs / 1000)}s</div>
        </div>`;
      }

      light._marker.setIcon(L.divIcon({
        className: 'custom-icon',
        html: htmlContent
      }));
    });
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä—ñ–≤ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
/*function loopLights() {
  updateLights();
  setInterval(loopLights, 100);
}
*/

// 1 —Ñ—É–Ω–∫—Ü–∏—è - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è! –í—ã–∑—ã–≤–∞—é—Ç—Å—è —Ñ-–∏–∏ createLightMarker –∏ –≤ –Ω–∏—Ö –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –æ–±—ä–µ–∫—Ç—ã —Å–≤–µ—Ç
function initializeLights() {
  lights.forEach(createLightMarker);
  updateLights(); // –ø–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ —Å—Ä–∞–∑—É
  setInterval(updateLights, 100);   // –¥–∞–ª—å—à–µ ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å —Å–µ–∫—É–Ω–¥–∞–º–∏
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä—ñ–≤ –∑ JSON
fetch('lights.json')
  .then(response => {
    if (!response.ok) throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ lights.json');
    return response.json();
  })
  .then(data => {
    lights = data;
    initializeLights();
  })
  .catch(err => console.error(err));

// --- –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞ –∫–∞—Ä—Ç—ñ ---
let userMarker = null;

function updateUserLocation(position) {
  const lat = position.coords.latitude;
  const lng = position.coords.longitude;

  if (!userMarker) {
    userMarker = L.circleMarker([lat, lng], {
      radius: 8,
      color: 'blue',
      fillColor: 'blue',
      fillOpacity: 0.8
    }).addTo(map).bindPopup("–¢–∏ —Ç—É—Ç üë§");
  } else {
    userMarker.setLatLng([lat, lng]);
  }
}

if (navigator.geolocation) {
  navigator.geolocation.watchPosition(updateUserLocation, (err) => {
    console.warn("–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞:", err.message);
  }, {
    enableHighAccuracy: true,
    maximumAge: 5000,
    timeout: 10000
  });
} else {
  alert("–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ.");
}
